import axios from "axios";
import crypto from "crypto";
import { HubConnectionBuilder, HttpTransportType, LogLevel } from "@microsoft/signalr";
import wait from "../utils/wait.js";
import Status from "../enums/status.js";
class Conversation {
    id;
    token;
    revProxy;
    connection;
    conversationSignature;
    conversationId;
    clientId;
    lastActivity;
    isStartOfSession = true;
    isConnected = false;
    isConversationCreated = false;
    status = Status.Inactive;
    constructor(id, token, revProxy) {
        this.id = id;
        this.token = token;
        this.revProxy = revProxy;
        this.lastActivity = Date.now();
        this.resetConversation()
            .then(async (data) => {
            if (data.result.message)
                throw new Error(data.result.message);
            this.conversationSignature = data.conversationSignature;
            this.conversationId = data.conversationId;
            this.clientId = data.clientId;
            await wait(50);
            this.isConversationCreated = true;
            this.connection = new HubConnectionBuilder()
                .withUrl("https://sydney.bing.com/sydney/ChatHub", {
                skipNegotiation: true,
                transport: HttpTransportType.WebSockets,
            })
                .configureLogging(LogLevel.None)
                .build();
            this.connection.onclose(() => {
                this.isConnected = false;
            });
            this.connection.start().then(() => {
                this.isConnected = true;
                this.status = Status.Idle;
            });
        })
            .catch(console.error);
    }
    async connect() {
        if (!this.isConnected) {
            await this.connection.start();
            this.isConnected = true;
            this.status = Status.Idle;
        }
    }
    async disconnect() {
        if (this.isConnected) {
            await this.connection.stop();
            this.isConnected = false;
            this.status = Status.Inactive;
        }
    }
    async waitForReady() {
        while (true) {
            if (this.isConversationCreated) {
                if (this.isConnected) {
                    return;
                }
            }
            await wait(100);
        }
    }
    async resetConversation() {
        let response = await axios.get(this.revProxy ?? "https://www.bing.com/turing/conversation/create", {
            headers: {
                accept: "application/json",
                "content-type": "application/json",
                "x-ms-client-request-id": crypto.randomUUID(),
                "x-ms-useragent": "azsdk-js-api-client-factory/1.0.0-beta.1 core-rest-pipeline/1.10.0 OS/Win32",
                cookie: `_U=${this.token}`,
                Referer: "https://www.bing.com/search?q=Bing+AI&showconv=1&FORM=hpcodx&iscopilotedu=1&form=MA13GA",
            },
        });
        return response.data;
    }
}
export default Conversation;
//# sourceMappingURL=conversation.js.map